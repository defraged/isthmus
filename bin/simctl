#!/bin/bash
# Original code by Dave Coyle (http://coyled.com)
# Tweaks by Gwyneth Llewelyn (http://gwynethllewelyn.net/)
# Additional code by Lotek Ixtar

# Requires bash 4

# Get the root folder of the isthmus tree
export OPENSIM_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
REGIONS_DIR="${OPENSIM_DIR}/etc/sims-enabled"

# Install isthmus config file if not already there, and then source it
if [ ! -f "${OPENSIM_DIR}/etc/isthmus.conf" ]; then
    cp "${OPENSIM_DIR}/share/common/etc/isthmus.conf" "${OPENSIM_DIR}/etc"
fi
source "${OPENSIM_DIR}/etc/isthmus.conf"

# Mono optimizations
export MONO_GC_PARAMS="nursery-size=32m,minor=split,promotion-age=14"

export ROBUST_HOSTNAME=`hostname`
export ISTHMUS_HOSTNAME=`hostname`

show_help() {
    echo -e "`basename $0` - Control opensim simulators\n"
    echo "start <simname>     Start a simulator"
    echo "stop <simname>      Stop and deregister from the map"
    echo "kill <simname>      Stop by sending SIGHUP (unclean)"
    echo "alert <simname> \"This is an alert message\"    Send an inworld alert msg"
    echo "restart <simname>   Issues a stop, then start command"
    echo "bluebox <simname> <warning> <seconds>  Stop after an inworld warning"
    echo "status <simname>    Returns online status"
    echo "backup <simname>    Ensure database is saved"
    echo "saveoar <simname>   Saves region contents to an .oar archive"
    echo "enable <simname>    Enable a sim"
    echo "disable <simname>   Disable a sim"
    echo "list                List available sims"
}

do_log() {
    logline="`date` - $1"
    echo $logline >> "${OPENSIM_DIR}/var/log/isthmus.log"
}

check_user() {
    if [ `whoami` == 'root' ]; then
        echo "Refusing to run as root"
        exit 1
    fi
}

is_running() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    SCREENPID=`${SCREEN} -ls ${SIM} | grep -P "${SIM}\t" | cut -f1 -d'.' | sed 's/W//g'`
    if [ "${SCREENPID}" != "" ]; then
        return 0
    else
        return 1
    fi
}

get_status() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    if is_running ${SIM}; then
        echo "[${SIM}] is online"
        exit 1
    else
        echo "[${SIM}] is offline"
        exit 0 
    fi
}

findfreeport() {
    for (( port=${TCP_PORT_RANGE_START}; port<=${TCP_PORT_RANGE_END}; port++ ))
    do
        grep -q ${port} ${OPENSIM_DIR}/var/ports/sims/* 2&> /dev/null
        if [ $? -ne 0 ]; then
            echo ${port}
            return
        fi
    done
    echo ${TCP_PORT_RANGE_START}
}

findfreeudpport() {
    for (( port=${UDP_PORT_RANGE_START}; port<=${UDP_PORT_RANGE_END}; port++ ))
    do
        if [ ! -f "${OPENSIM_DIR}/var/ports/regions/${port}" ]; then
            echo "${SIM}" > "${OPENSIM_DIR}/var/ports/regions/${port}"
            echo ${port}
            return
        fi
    done
    return ${UDP_PORT_RANGE_START}
}

cleanup_ports() {
    for (( port=${UDP_PORT_RANGE_START}; port<=${UDP_PORT_RANGE_END}; port++ ))
    do
        PORT_FILE="${OPENSIM_DIR}/var/ports/regions/${port}"
        if [ -r ${PORT_FILE} ]; then
            USED_BY_SIM=`cat ${PORT_FILE}`
            if [ "${SIM}" == "${USED_BY_SIM}" ]; then
                rm ${PORT_FILE}
            fi
        fi
    done
    PORT_FILE="${OPENSIM_DIR}/var/ports/sims/${SIM}.port"
    if [ -r ${PORT_FILE} ]; then
        rm ${PORT_FILE}
    fi
}

setup() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    mkdir -p "${OPENSIM_DIR}/var/log"
    export ISTHMUS_LOGFILE="${OPENSIM_DIR}/var/log/${SIM}.log"

    mkdir -p "${OPENSIM_DIR}/var/pid"
    export ISTHMUS_PIDFILE="${OPENSIM_DIR}/var/pid/${SIM}.pid"

    mkdir -p "${OPENSIM_DIR}/var/ports/sims"
    if [ -f "${OPENSIM_DIR}/var/ports/sims/${SIM}.port" ]; then
        ISTHMUS_PORT=`cat ${OPENSIM_DIR}/var/ports/sims/${SIM}.port`
    else
        ISTHMUS_PORT=$(findfreeport)
    fi
    export ISTHMUS_PORT

    mkdir -p "${OPENSIM_DIR}/var/ports/regions"
}

do_start() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    if [ ! -d "${REGIONS_DIR}/${SIM}" ]; then
        echo "[${SIM}] Not enabled or does not exist"
        exit 1
    fi

    if is_running ${SIM}; then
        echo "[${SIM}] Already started"
        exit 1
    fi

    setup ${SIM}
    check_user

    # Rotate log file if existing already
    if [ -r "${ISTHMUS_LOGFILE}" ]; then
        mv -f "${ISTHMUS_LOGFILE}" "${ISTHMUS_LOGFILE}.old"
    fi

    for region in ${REGIONS_DIR}/${SIM}/*.ini; do
        # Update hostname
        sed -i --follow-symlinks -e "s/ExternalHostName.*/ExternalHostName = ${ISTHMUS_HOSTNAME}/" "${region}"
        REGION_PORT=$(findfreeudpport)
        # Change UDP region port
        sed -i --follow-symlinks -e "s/InternalPort.*/InternalPort = ${ISTHMUS_PORT}/" "${region}"
    done;

    # Second Life time is the US/Pacific-New timezone
    export TZ="US/Pacific-New"
    export LANG=C
    export ISTHMUS_REGIONSDIR="${REGIONS_DIR}/${SIM}"
    ulimit -n 4096
    cd "${OPENSIM_DIR}/runtime/bin" && ${SCREEN} -S ${SIM} -d -m -l \
        ${MONO} --desktop OpenSim.exe \
        -inifile="${OPENSIM_DIR}/share/system/opensim.ini"

    echo -n "[${SIM}] Starting"
    STARTTIME=0
    while :
    do
        sleep 5
        STARTTIME=$((STARTTIME + 5))
        echo -n "."
        if is_running ${SIM}; then
            echo "${ISTHMUS_PORT}" > "${OPENSIM_DIR}/var/ports/sims/${SIM}.port"
            echo " started"
            exit 0
        elif [ ${STARTTIME} -ge 30 ]; then
            echo " Failed. Disabling sim!"
            do_log "[${SIM}] Has problems with starting. Disabling sim!"
            cd "${OPENSIM_DIR}/bin"
            ./simctl disable ${SIM}
            exit 1
        fi
    done

}

do_kill() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    setup ${SIM}
    check_user

    if is_running ${SIM}; then
        # Send backup command and wait 1 minute
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "\nbackup"
        sleep 60
        if [ -f "${ISTHMUS_PIDFILE}" ]; then
            kill -9 `cat ${ISTHMUS_PIDFILE}`
            rm "${ISTHMUS_PIDFILE}"
            cleanup_ports
            echo "[${SIM}] Killed"
        fi
    fi
}

do_stop() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    setup ${SIM}
    check_user

    if is_running ${SIM}; then
        echo -n "[${SIM}] Stopping"
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "\nquit"
        STOPTIME=0
        while :
        do
            sleep 5
            STOPTIME=$((STOPTIME + 5))
            echo -n "."
            if ! is_running ${SIM}; then
                cleanup_ports
                echo " stopped"
                # OpenSim sometimes doesn't clear up PID file
                if [ -f "${ISTHMUS_PIDFILE}" ]; then
                    rm "${ISTHMUS_PIDFILE}"
                fi
                return 0
            elif [ ${STOPTIME} -ge 120 ]; then
                echo " killing"
                do_kill ${SIM}
                do_log "[${SIM}] Took a long time to shutdown"
                return 1
            fi
        done
    else
        echo "[${SIM}] Not running"
        exit 1
    fi
}

do_alert() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    setup ${SIM}
    check_user

    if is_running ${SIM}; then
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "\nalert $2"
    else
        echo "${SIM} not running"
    fi
}

do_bluebox() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    setup ${SIM}
    check_user

    if is_running ${SIM}; then
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "\nregion restart bluebox \"$2\" $3"
        echo -n "[${SIM}] Scheduled for stopping in $3 seconds"
        sleep $3
        STOPTIME=0
        while :
        do
            sleep 5
            STOPTIME=$((STOPTIME + 5))
            echo -n "."
            if ! is_running ${SIM}; then
                cleanup_ports
                echo " stopped"
                return 0
            elif [ ${STOPTIME} -ge 120 ]; then
                echo " killing"
                do_kill ${SIM}
                do_log "[${SIM}] Took a long time to shutdown"
                return 1
            fi
        done
    else
        echo "[${SIM}] not running"
    fi
}

do_backup() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    setup ${SIM}
    check_user

    if is_running ${SIM}; then
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "backup"
    else
        echo "${SIM} not running"
    fi
}

do_audit() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    if [ ! -r ${REGIONS_DIR}/${SIM}.ini ]; then
        echo "${SIM}: No such sim or not enabled"
        exit 1
    fi

    if [ -f "${OPENSIM_DIR}/var/ports/sims/${SIM}.port" ]; then
       tcp_port=`cat ${OPENSIM_DIR}/var/ports/${SIM}.port`
       echo -e "${tcp_port}\t${SIM}"
    else
       echo -e " -- \t${SIM}"
    fi
}


# do_saveoar simname (oarpath)
# Saves oars for region in simulator
# If no oarpath specified, use default var/backup/yyyy-mm-dd
do_saveoar() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    setup ${SIM}
    check_user

    if [ ! $3 ]; then
        LOCAL_OAR_PATH="${OPENSIM_DIR}/var/backup/`date -I'date'`"
    else
        LOCAL_OAR_PATH=$3 
    fi

    mkdir -p "${LOCAL_OAR_PATH}"

    if is_running ${SIM}; then
        # Alert inworld about temporary degraded performance"
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "\nalert \"SYSTEM NOTICE: Region backup in progress. Performance might be a bit slower for a few minutes..\""
        sleep 3

        OAR_FILE="${LOCAL_OAR_PATH}/${SIM}-`date -I'date'`.oar"
        ${SCREEN} -r ${SCREENPID}.${SIM} -X exec .\!\! echo "\nsave oar ${OAR_OPTIONS} \"${OAR_FILE}\""
        sleep 120
    fi
}

do_list() {
    for simulator in ${REGIONS_DIR}/*; do
        echo "${simname}"
    done;
}

do_enable() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    if [ ! -d "${OPENSIM_DIR}/etc/sims-available/${SIM}" ]; then
        echo "${SIM}: No such sim"
        exit 1
    fi

    if [ -d "${REGIONS_DIR}/${SIM}" ]; then
        echo "${SIM}: Already enabled"
        exit 1
    fi

    cd "${OPENSIM_DIR}/etc/sims-enabled"
    ln -s "../sims-available/${SIM}"
}

do_disable() {
    if [ ! $1 ]; then
        show_help
        exit 1
    else
        SIM=$1
    fi

    if [ ! -d "${OPENSIM_DIR}/etc/sims-available/${SIM}" ]; then
        echo "${SIM}: No such sim"
        exit 1
    fi

    if [ -d "${REGIONS_DIR}/${SIM}" ]; then
        rm "${REGIONS_DIR}/${SIM}"
        exit 0
    else
        echo "${SIM}: Already disabled"
        exit 1
    fi
}

case "$1" in
    start)
        do_start $2
        ;; 
    stop)
        do_stop $2
        ;;
    kill)
        do_kill $2
        ;;
    alert)
        do_alert $2 "$3"
        ;;
    bluebox)
        do_bluebox $2 "$3" $4
        ;;
    restart)
        do_stop $2
        # Take time for the pid file to clear
        sleep 3
        do_start $2
        ;;
    status)
        get_status $2
        ;;
    audit)
        do_audit $2
        ;;
    saveoar)
        do_saveoar $2
        ;;
    backup)
        do_backup $2
        ;;
    list)
        do_list
        ;;
    enable)
        do_enable $2
        ;;
    disable)
        do_disable $2
        ;;
    *)
        show_help
        exit 1
        ;;
esac

